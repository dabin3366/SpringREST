REST.txt

  REST? Representational State Transfer(2000-로이필딩)
  하나의 URI는 하나의 고유한 데이터(리소스)를 대표하도록하는것
  => REST API를 사용한 개발 Restful한 개발 
  
  예전 웹 : 서버에서 데이터 생성 view(브라우저)에서 출력
  요즘 웹 : 서버에서 데이터 생성 view(브라우저/모바일) 출력(정보 전달)
  
  * REST 제약조건
  1. Client - Server : 요청/제공쪽 모두 표준 인터페이스로 구분(상호독립적)
  2. StateLess : 클라이언트의 컨텍스트가 서버에 저장X, 클라이언트에 저장O
  3. Cacheable : 서버의 응답은 캐싱 될 수 있어야하고, 이를 통행 확장성, 성능 개선가능
  4. Uniform interface : 표준 인터페이스를 통해서 클라이언트, 서버가 각각 구현 
  5. Layered system : 클라이언트와 서버사이의 부하분산(중계서버)
  6. Code on demand : JavaApplet/Script등을 클라이언트가 수행가능하도록
  
   [Uniform interface]
   - 리소스가 URI로 식별되어야 함
   - 리소스 생성,수정,추가할때, HTTP메세지를 통해서 표현
   - 메세지는 스스로 설명가능함
   - 애플리케이션의 상태는 하이퍼링크를 통해서 전달 되어야함
   
   경로 /customers/{id}에 대한 경로를 정의
   
   리소스 URI를 [컬렉션/항목/컬렉션] 보다 더 복잡ㅈ하게 요구하지 않는것이
   
   스프링3 -> @ResponseBody
   스프링4 -> @RestController
   
   * Http Status 코드
   
   100번대 : 현재 데이터의 처리중인 상태
   - 100 : 데이터의 일부를 서버에 전달받은 상태
   
   200번대 : 정상적인 응답
   - 200 : 에러없이 정상적으로 처리된 상태
   - 201 : 요청은 성공적, 결과로 새로운 리소스가 생성된 상태
   - 204 : 정상처리 후 서버로 보낼데이터 없다.
   
   300번대 : 다른 URL처리 (리다이렉션)
   - 301 Moved Permanently : 요청한 페이지가 새 URL로 변경
   - 304 Not Modified : 이미 기존의 데이터와 변경사항이 없음
   
   400번대 : 서버에서 인식불가능(클라이언트 오류)
   - 400 Bad Request : 전송된 Request에 문제가 있어서 서버처리 불가능 (ajax)  
   - 403 Forbidden : 서버에서 접근 불가(접근권한 없이 접근)
   - 404 Not Found : URL에 해당하는 리소스(페이지)가 찾을 수 없음
   - 405 Method Not Allowed : 전달방식이 다른 타입의 메서드가 없는경우
   
   500번대 : 서버 내부의 문제
   - 500 Internal Server Error : 서버에서 내부 처리시 문제 발생하는 경우
   - 502 Bad Gateway : 게이트웨이/프록시 상태의 문제(과부하..)
   - 503 Service Unavailable : 일시적 과부화, 서비스 중단상태
   - 504 Gateway Timeout : 지정된 처리시간이 지나서 처리 불가
   
   * REST방식 게시판 작성
   
   주소 설정 : [컬렉션/항목/컬렉션]
      => /작업(동작명)/기본키
      => /작업(동작명)/메서드
      => /작업(동작명)/데이터
   
     작업(동작명) : 요청하는 작업의 종류(명사) members/boards/order/goods
     기본키 : 요청작업에 필요한 해당 대상의 기본값
     데이터 : 기능 수행에 필요한 데이터값(JSON데이터)
   
   * HTTP 메서드의미 부여
     GET 방식 : 조회 (select)
     POST 방식 : 추가 (create)
     PUT 방식 : 전체 수정 (update)
     PATCH 방식 : 일부 수정 (update)
     DELETE 방식 : 삭제 (delete)
     
     게시판
     
     글쓰기(C) : /boards + 데이터			(POST)
     
     글조회(R) : /boards/100				(GET)
     
     글목록 조회(R) : /boards/1/list        (GET)
     
     글수정(U) : /boards/100 + 수정데이터	(PUT)
     
     글삭제(D) : /boards/100 				(DELETE)
     
   
   
   